{"remainingRequest":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Views/App.vue?vue&type=template&id=89e27192&scoped=true&","dependencies":[{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Views/App.vue","mtime":1585251137236},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}