{"remainingRequest":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Views/Welcome.vue?vue&type=template&id=788ab0f8&scoped=true&","dependencies":[{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Views/Welcome.vue","mtime":1585252883896},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcmxheSIgfSwgWwogICAgX3ZtLmFwcC5hdmF0YXJVcmkKICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcHAtaWNvbiIsCiAgICAgICAgICBhdHRyczogeyBhbHQ6IF92bS5hcHAuZGlzcGxheU5hbWUsIHNyYzogX3ZtLmFwcC5hdmF0YXJVcmkgfQogICAgICAgIH0pCiAgICAgIDogX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXBwLWljb24iLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL2JyYW5kLmpodS5lZHUvYXNzZXRzL3VwbG9hZHMvc2l0ZXMvNS8yMDE0LzA2L3VuaXZlcnNpdHkuc2hpZWxkLnNtYWxsXy5ibHVlXy5wbmciLAogICAgICAgICAgICBhbHQ6IF92bS5hcHAuZGlzcGxheU5hbWUKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJhcHAtdGl0bGUiIH0sIFsKICAgICAgX3ZtLl92KCJXZWxjb21lIHRvIHRoZSBDT1ZJRC0xOSBRJkEgQ2hhdGJvdCIpCiAgICBdKSwKICAgIF92bS5fbSgwKSwKICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImFwcC1kZXNjcmlwdGlvbiIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgJ1lvdSBjYW4gYXNrIG1lIHF1ZXN0aW9ucyBsaWtlOiAiV2hhdCBpcyB0aGUgY29yb25hdmlydXM/IiBvciAiV2hhdCBpcyBzb2NpYWwgZGlzdGFuY2luZz8iJwogICAgICApCiAgICBdKSwKICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImFwcC1kZXNjcmlwdGlvbiIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIlRoZSBkYXRhIHRoYXQgeW91IGNvbnRyaWJ1dGUgd2lsbCBiZSB1c2VkIGZvciByZXNlYXJjaCwgZWR1Y2F0aW9uIGFuZCB0ZWNobm9sb2d5IGRldmVsb3BtZW50LiIKICAgICAgKQogICAgXSksCiAgICBfdm0uYXBwLnN1cHBvcnRlZExhbmd1YWdlQ29kZXMgJiYgX3ZtLmFwcC5zdXBwb3J0ZWRMYW5ndWFnZUNvZGVzLmxlbmd0aCA+IDAKICAgICAgPyBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxhbmd1YWdlLXBpY2tlciIsCiAgICAgICAgICAgICAgICBjbGFzczogeyBwaWNrZWQ6IF92bS5zZWxfbGFuZyA9PSBfdm0uYXBwLmRlZmF1bHRMYW5ndWFnZUNvZGUgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJjaGVja2JveCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsX2xhbmcgPSBfdm0uYXBwLmRlZmF1bHRMYW5ndWFnZUNvZGUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uX2YoInRvTGFuZyIpKF92bS5hcHAuZGVmYXVsdExhbmd1YWdlQ29kZSkpICsKICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbChfdm0uYXBwLnN1cHBvcnRlZExhbmd1YWdlQ29kZXMsIGZ1bmN0aW9uKGxhbmd1YWdlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogbGFuZ3VhZ2UsCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtcGlja2VyIiwKICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgcGlja2VkOiBfdm0uc2VsX2xhbmcgPT0gbGFuZ3VhZ2UgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImNoZWNrYm94IiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS5zZWxfbGFuZyA9IGxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLl9mKCJ0b0xhbmciKShsYW5ndWFnZSkpICsgIiAiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdLAogICAgICAgICAgMgogICAgICAgICkKICAgICAgOiBfdm0uX2UoKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImFwcC1kZXNjcmlwdGlvbiIgfSwgWwogICAgICBfdm0uX3YoIkZyb20gIiksCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vamh1LWNvdmlkLXFhLmdpdGh1Yi5pby8iLAogICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIlRoZSBKb2hucyBIb3BraW5zIFVuaXZlcnNpdHkgQ0xTUCIpXQogICAgICApCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}