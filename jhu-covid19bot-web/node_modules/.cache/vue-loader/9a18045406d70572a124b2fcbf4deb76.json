{"remainingRequest":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Components/Parts/ChatInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/src/Components/Parts/ChatInput.vue","mtime":1585251137235},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arpansahoo/Documents/GitHub/JHU-COVID-QA.github.io/jhu-covid19bot-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCndpbmRvdy5NZWRpYVJlY29yZGVyID0gcmVxdWlyZSgnYXVkaW8tcmVjb3JkZXItcG9seWZpbGwnKQpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnQ2hhdElucHV0JywKICAgIGRhdGEoKXsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBxdWVyeTogJycsCiAgICAgICAgICAgIG1pY3JvcGhvbmU6IGZhbHNlLAogICAgICAgICAgICByZWNvZ25pdGlvbjogbnVsbCwKICAgICAgICAgICAgcmVjb3JkZXI6IG51bGwsCiAgICAgICAgICAgIHNob3VsZF9saXN0ZW46IHRydWUKICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICAvKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGVjaWRlLCB3aGV0aGVyIGFsbG93IG1pY3JvcGhvbmUgaW5wdXQgKi8KICAgICAgICBtaWNyb3Bob25lX2FsbG93ZWQoKXsKICAgICAgICAgICAgaWYgKHRoaXMucmVjb2duaXRpb24gfHwgdGhpcy5yZWNvcmRlcikgcmV0dXJuIHRydWUKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfQogICAgfSwKICAgIHdhdGNoOiB7CiAgICAgICAgLyogVG9nZ2xlIG1pY3JvcGhvbmUgKi8KICAgICAgICBtaWNyb3Bob25lKGFjdGl2YXRlKXsKICAgICAgICAgICAgaWYgKGFjdGl2YXRlKXsKICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkX2xpc3RlbiA9IHRydWUKICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlY29nbml0aW9uKXsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29nbml0aW9uLmxhbmcgPSB0aGlzLmxhbmcoKQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb2duaXRpb24uc3RhcnQoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmVjb3JkZXIpIHRoaXMucmVjb3JkZXIuc3RhcnQoKQogICAgICAgICAgICB9CgogICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlY29nbml0aW9uKSB0aGlzLnJlY29nbml0aW9uLmFib3J0KCkKICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yZWNvcmRlcikgdGhpcy5yZWNvcmRlci5zdG9wKCkKICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpewogICAgICAgIC8qIFNldCB1cCByZWNvZ25pdGlvbiAqLwogICAgICAgIGlmICh3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LlNwZWVjaFJlY29nbml0aW9uKXsKICAgICAgICAgICAgdGhpcy5yZWNvZ25pdGlvbiA9IG5ldyB3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb24oKSB8fCBuZXcgd2luZG93LlNwZWVjaFJlY29nbml0aW9uKCkKICAgICAgICAgICAgdGhpcy5yZWNvZ25pdGlvbi5pbnRlcmltUmVzdWx0cyA9IHRydWUKICAgICAgICAgICAgdGhpcy5yZWNvZ25pdGlvbi5vbnJlc3VsdCA9IGV2ZW50ID0+IHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBldmVudC5yZXN1bHRJbmRleDsgaSA8IGV2ZW50LnJlc3VsdHMubGVuZ3RoOyArK2kpewogICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSBldmVudC5yZXN1bHRzW2ldWzBdLnRyYW5zY3JpcHQgLy8gPC0gcHVzaCByZXN1bHRzIHRvIHRoZSBUZXh0IGlucHV0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMucmVjb2duaXRpb24ub25lbmQgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLnJlY29nbml0aW9uLnN0b3AoKQogICAgICAgICAgICAgICAgdGhpcy5taWNyb3Bob25lID0gZmFsc2UKICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0KHt0ZXh0OiB0aGlzLnF1ZXJ5fSkgLy8gPC0gc3VibWl0IHRoZSByZXN1bHQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyogU2V0IHVwIHJlY29yZGVyICovCiAgICAgICAgZWxzZSBpZiAod2luZG93Lk1lZGlhUmVjb3JkZXIpewogICAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7YXVkaW86IHRydWV9KQogICAgICAgICAgICAudGhlbihzdHJlYW0gPT4gewogICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRlciA9IG5ldyB3aW5kb3cuTWVkaWFSZWNvcmRlcihzdHJlYW0pCiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RhdGFhdmFpbGFibGUnLCByZWNvcmRpbmcgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChyZWNvcmRpbmcuZGF0YSkKICAgICAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdCh7YXVkaW86IHJlYWRlci5yZXN1bHQucmVwbGFjZSgvXmRhdGE6Lis7YmFzZTY0LC8sICcnKX0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGxpc3RlbigpewogICAgICAgICAgICBpZiAodGhpcy5zaG91bGRfbGlzdGVuKSB0aGlzLm1pY3JvcGhvbmUgPSB0cnVlCiAgICAgICAgfSwKICAgICAgICBzdWJtaXQoc3VibWlzc2lvbil7CiAgICAgICAgICAgIGlmIChzdWJtaXNzaW9uLnRleHQgJiYgc3VibWlzc2lvbi50ZXh0Lmxlbmd0aCA+IDApewogICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc3VibWl0Jywgc3VibWlzc2lvbikKICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSAnJwogICAgICAgICAgICB9CgogICAgICAgICAgICBlbHNlIGlmIChzdWJtaXNzaW9uLmF1ZGlvKSB0aGlzLiRlbWl0KCdzdWJtaXQnLCBzdWJtaXNzaW9uKQogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["ChatInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ChatInput.vue","sourceRoot":"src/Components/Parts","sourcesContent":["<template>\n    <div class=\"bottomchat\">\n        <div class=\"container\">\n            <!-- Here are the suggestions -->\n            <div class=\"suggestions\"><slot /></div>\n            <div class=\"flexible\">\n                <!-- Text input -->\n                <input\n                    v-model=\"query\"\n                    class=\"input\"\n                    type=\"text\"\n                    autofocus\n                    :placeholder=\"(translations[lang()] && translations[lang()].inputTitle) || translations[config.fallback_lang].inputTitle\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].inputTitle) || translations[config.fallback_lang].inputTitle\"\n                    @keypress.enter=\"submit({text: query})\"\n                    @focus=\"microphone = false; should_listen = false\">\n\n                <!-- Send message button (arrow button) -->\n                <button\n                    v-if=\"!microphone && query.length > 0 || !microphone_allowed\"\n                    class=\"button\"\n                    :title=\"(translations[lang()] && translations[lang()].sendTitle) || translations[config.fallback_lang].sendTitle\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].sendTitle) || translations[config.fallback_lang].sendTitle\"\n                    @click=\"submit({text: query})\">\n                    <i class=\"material-icons\" aria-hidden=\"true\">arrow_upward</i>\n                </button>\n\n                <!-- Microphone Button -->\n                <button\n                    v-else\n                    class=\"button\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].microphoneTitle) || translations[config.fallback_lang].microphoneTitle\"\n                    :title=\"(translations[lang()] && translations[lang()].microphoneTitle) || translations[config.fallback_lang].microphoneTitle\"\n                    :class=\"{'mic_active': microphone}\"\n                    @click=\"microphone = !microphone\">\n                    <i class=\"material-icons\" aria-hidden=\"true\">mic</i>\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style lang=\"sass\" scoped>\n@import '@/Style/Mixins'\n\n.bottomchat\n    position: fixed\n    bottom: 0\n    left: 0\n    width: 100%\n    background-color: var(--background)\n    padding-bottom: 8px\n\n.flexible\n    display: flex\n\n.suggestions\n    overflow-x: scroll\n    overflow-y: hidden\n    white-space: nowrap\n    -webkit-overflow-scrolling: touch\n\n    &::-webkit-scrollbar\n        display: none\n\n.input\n    font-size: 16px\n    font-weight: 500\n    width: 100%\n    box-sizing: border-box\n    border: none\n    padding: 10px 12px\n    color: var(--text)\n    border-radius: 40px\n    flex: 1 0 0\n    background-color: var(--element-background)\n\n    &:focus\n        outline: 0 !important\n\n.button\n    @include reset\n    padding: 8px\n    margin-left: 6px\n    border-radius: 50%\n    cursor: pointer\n    background-color: var(--element-background)\n    color: var(--text)\n    font-size: 24px\n    display: flex\n\n    &:focus\n        outline: 0 !important\n\n    &.mic_active\n        background-color: #F44336\n        color: white\n</style>\n\n<script>\nwindow.MediaRecorder = require('audio-recorder-polyfill')\nexport default {\n    name: 'ChatInput',\n    data(){\n        return {\n            query: '',\n            microphone: false,\n            recognition: null,\n            recorder: null,\n            should_listen: true\n        }\n    },\n    computed: {\n        /* Helper function to decide, whether allow microphone input */\n        microphone_allowed(){\n            if (this.recognition || this.recorder) return true\n            return false\n        }\n    },\n    watch: {\n        /* Toggle microphone */\n        microphone(activate){\n            if (activate){\n                this.should_listen = true\n                if (this.recognition){\n                    this.recognition.lang = this.lang()\n                    this.recognition.start()\n                }\n\n                else if (this.recorder) this.recorder.start()\n            }\n\n            else if (this.recognition) this.recognition.abort()\n            else if (this.recorder) this.recorder.stop()\n        }\n    },\n    created(){\n        /* Set up recognition */\n        if (window.webkitSpeechRecognition || window.SpeechRecognition){\n            this.recognition = new window.webkitSpeechRecognition() || new window.SpeechRecognition()\n            this.recognition.interimResults = true\n            this.recognition.onresult = event => {\n                for (let i = event.resultIndex; i < event.results.length; ++i){\n                    this.query = event.results[i][0].transcript // <- push results to the Text input\n                }\n            }\n\n            this.recognition.onend = () => {\n                this.recognition.stop()\n                this.microphone = false\n                this.submit({text: this.query}) // <- submit the result\n            }\n        }\n\n        /* Set up recorder */\n        else if (window.MediaRecorder){\n            navigator.mediaDevices.getUserMedia({audio: true})\n            .then(stream => {\n                this.recorder = new window.MediaRecorder(stream)\n                this.recorder.addEventListener('dataavailable', recording => {\n                    const reader = new FileReader()\n                    reader.readAsDataURL(recording.data)\n                    reader.onloadend = () => {\n                        this.submit({audio: reader.result.replace(/^data:.+;base64,/, '')})\n                    }\n                })\n            })\n        }\n    },\n    methods: {\n        listen(){\n            if (this.should_listen) this.microphone = true\n        },\n        submit(submission){\n            if (submission.text && submission.text.length > 0){\n                this.$emit('submit', submission)\n                this.query = ''\n            }\n\n            else if (submission.audio) this.$emit('submit', submission)\n        }\n    }\n}\n</script>"]}]}